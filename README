JAPHA by Ryan Gantt

1) WHAT IS JAPHA?

Japha is a free, open-source API for php that is loosely based on some of the most
(in my opinion Fundamental) classes in the Java API. The Japha API is lightweight,
and can be used in nearly every situation that can arise (chances are it doesn't 
contain a solution for EVERY problem). Japha is portable... It comes contained in a
single directory, and can therefore be easily added to any existing project that you
may have. It's also self-reliant (for the most part), meaning that you don't need
all of the classes to use some of the classes (See the Head's-Up's for more information
on some issues with this)

Origins

All of the classes in the Japha API can be traced back to classes in the Java 1.4.1 API.
The primary reason for this is the maturity of the Java API, and the wide range of classes
that it contains. This is not a blow to PHP in any way -- PHP has TONS of built-in
functions (function, mind you, not classes) that allow many of these operations to be
executed. However, these functions are not necessarily grouped in an optimal fashion,
which can lead to farts in productivity.

Why Java?

Well, one of the best reasons I can give is that the people writing the java classes have
done an excellent job with ease of implementation and reuse. Not often will you have to
write very many methods in order to use a specific class -- most of them are flexible 
enough to morph to your project quite well. Another reason for the almost 'child of java'
approach to this API is the development of PHP 5 and future php versions. They all
seem to be geared to Java-like syntax and Java-like functionality. I figured it would be
counter-productive to create classes for a Java-like language that were based on classes
in a completely different langage (say Python, or some of the .NET-geared languages).

Motives

When I first created an api to reuse in my projects, all I wanted to do was save myself
some time (like any pragmatically minded programmer would =]) and learn some of the ins
and outs of PHP 5 at the same time. As it turns out, I realized that if I am going to
be able to reuse these classes in my scripts and project, then, hey, there has to
be some other people out there looking for the same thing that I am, right?